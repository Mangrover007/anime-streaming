generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnimeStatus {
  AIRING
  FINISHED
  UPCOMING
  HIATUS
}

enum RoleEnum {
  ADMIN
  USER
}

model User {
  id              Int                 @id @default(autoincrement())
  username        String              @unique
  email           String              @unique
  password        String
  profilePicture  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  comments        Comment[]
  animeProgress   UserAnimeProgress[]
  favoriteAnimes  Anime[]             @relation("UserFavorites")

  roleId          Int
  role            Role                @relation(fields: [roleId], references: [id])
}

model Role {
  id              Int                 @id @default(autoincrement())
  name            RoleEnum

  users           User[]              
}

model Anime {
  id              Int                 @id @default(autoincrement())
  title           String              @unique
  description     String
  rating          Float?
  author          String
  startedAiring   DateTime            @db.Date // ✅ MODIFIED: Use @db.Date for date only
  finishedAiring  DateTime?           @db.Date // ✅ MODIFIED: Use @db.Date for date only
  status          AnimeStatus
  thumbnailUrl    String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  seasons         Season[]
  genres          Genre[]             @relation("AnimeGenres")

  favoritedBy     User[]              @relation("UserFavorites")
  userProgress    UserAnimeProgress[]
}

model Genre {
  id     Int    @id @default(autoincrement())
  name   String @unique

  animes Anime[] @relation("AnimeGenres")
}

model Season {
  id              Int       @id @default(autoincrement())
  anime           Anime     @relation(fields: [animeId], references: [id])
  animeId         Int
  seasonNumber    Int
  isFinished      Boolean   @default(false)
  startedAiring   DateTime? @db.Date // ✅ MODIFIED: Use @db.Date for date only
  finishedAiring  DateTime? @db.Date // ✅ MODIFIED: Use @db.Date for date only
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  episodes        Episode[]
}

model Episode {
  id            Int                 @id @default(autoincrement())
  season        Season              @relation(fields: [seasonId], references: [id])
  seasonId      Int
  title         String
  episodeNumber Int
  length        Int
  airedAt       DateTime            @db.Date // ✅ MODIFIED: Use @db.Date for date only
  subUrl        String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  comments      Comment[]
  userProgress  UserAnimeProgress[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  episode     Episode  @relation(fields: [episodeId], references: [id])
  episodeId   Int
  createdAt   DateTime @default(now())
}

model UserAnimeProgress {
  user          User     @relation(fields: [userId], references: [id])
  userId        Int

  anime         Anime    @relation(fields: [animeId], references: [id])
  animeId       Int

  episode       Episode  @relation(fields: [episodeId], references: [id])
  episodeId     Int

  progressTime  Int
  updatedAt     DateTime @updatedAt

  @@id([userId, animeId])
}
